version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: survey-db
    environment:
      POSTGRES_DB: survey_db
      POSTGRES_USER: survey_user
      POSTGRES_PASSWORD: survey_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/localization_queries/schemacreation:/docker-entrypoint-initdb.d
    networks:
      - survey-network

  # Main Application (unified frontend + backend)
  survey-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: survey-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: survey_db
      DB_USER: survey_user
      DB_PASSWORD: survey_password
      SESSION_SECRET: docker_dev_secret_change_in_production
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - survey-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 5000, path: '/api/health' }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: survey-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@survey.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - survey-network
    profiles:
      - dev-tools

volumes:
  postgres_data:

networks:
  survey-network:
    driver: bridge